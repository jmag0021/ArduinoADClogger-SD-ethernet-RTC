
//https://github.com/jcw/ethercard/tree/master/examples
#include <EtherCard.h>

// change these settings to match your own setup
//#define FEED "000"
#define APIKEY "1847F2E71UC58A0V" // put your key here
#define ethCSpin 53 // put your CS/SS pin here.

// ethernet interface mac address, must be unique on the LAN
static byte mymac[] = { 0x74,0x69,0x69,0x2D,0x30,0x31 };
const char website[] PROGMEM = "api.thingspeak.com";
byte Ethernet::buffer[700];//700
uint32_t timer;
Stash stash;
byte session;

//timing variable
int res = 100; // was 0



void setup () {
  Serial.begin(9600);
  Serial.println("\n[Andrew Zammit Logger]");

  //Initialize Ethernet
  initialize_ethernet();
}


void loop () { 

  // Read value from Analog Input Pin 0
  String analogValue0 = String(analogRead(A0)*0.48828125, DEC);
  String analogValue1 = String(analogRead(A0)*0.48828125, DEC);
  String analogValue2 = String(analogRead(A0)*0.48828125, DEC);
  String analogValue3 = String(analogRead(A0)*0.48828125, DEC);
  String analogValue4 = String(analogRead(A0)*0.48828125, DEC);
  String analogValue5 = String(analogRead(A0)*0.48828125, DEC);
  String analogValue6 = String(analogRead(A0)*0.48828125, DEC);
  String analogValue7 = String(analogRead(A0)*0.48828125, DEC);
  String analogValue8 = String(analogRead(A0)*0.48828125, DEC);
  String analogValue9 = String(analogRead(A0)*0.48828125, DEC);
  
  //if correct answer is not received then re-initialize ethernet module
  if (res > 220){
    initialize_ethernet(); 
  }
  
  res = res + 1;
  
  ether.packetLoop(ether.packetReceive());
  
  //200 res = 10 seconds (50ms each res)
  if (res == 200) {

    
    //Generate random info
   

    
    byte sd = stash.create();
    stash.print("field1="+analogValue0+"&field2="+analogValue1+"&field3="+analogValue2+"&field4="+analogValue3+"&field5="+analogValue4+"&field6="+analogValue5+"&field7="+analogValue6);
 
    stash.save();

    //Display data to be sent



    // generate the header with payload - note that the stash size is used,
    // and that a "stash descriptor" is passed in as argument using "$H"
    Stash::prepare(PSTR("POST /update HTTP/1.0" "\r\n"
      "Host: $F" "\r\n"
      "Connection: close" "\r\n"
      "X-THINGSPEAKAPIKEY: $F" "\r\n"
      "Content-Type: application/x-www-form-urlencoded" "\r\n"
      "Content-Length: $D" "\r\n"
      "\r\n"
      "$H"),
    website, PSTR(APIKEY), stash.size(), sd);

    // send the packet - this also releases all stash buffers once done
    session = ether.tcpSend(); 

 // added from: http://jeelabs.net/boards/7/topics/2241
 int freeCount = stash.freeCount();
    if (freeCount <= 3) {   Stash::initMap(56); } 
  }
  
   const char* reply = ether.tcpReply(session);
   
   if (reply != 0) {
     res = 0;
     Serial.println(F(" >>>REPLY recieved...."));
   
   //Serial.println(reply);
      Serial.print("T1=");
    Serial.print(analogRead(A0)*0.4882812);
      Serial.print("T2=");
    Serial.print(analogRead(A0)*0.4882812);

   }
   delay(300);
}


/////////////////////////////////////


void initialize_ethernet(void){  
  for(;;){ // keep trying until you succeed 
    //Reinitialize ethernet module
    //pinMode(5, OUTPUT);  // do notknow what this is for, i ve got something elso on pin5
    //Serial.println("Reseting Ethernet...");
    //digitalWrite(5, LOW);
    //delay(1000);
    //digitalWrite(5, HIGH);
    //delay(500);

    if (ether.begin(sizeof Ethernet::buffer, mymac, ethCSpin) == 0){ 
      Serial.println( "Failed to access Ethernet controller");
      continue;
    }
    
    if (!ether.dhcpSetup()){
      Serial.println("DHCP failed");
      continue;
    }

    ether.printIp("IP:  ", ether.myip);
    ether.printIp("GW:  ", ether.gwip);  
    ether.printIp("DNS: ", ether.dnsip);  

    if (!ether.dnsLookup(website))
      Serial.println("DNS failed");

    ether.printIp("SRV: ", ether.hisip);

    //reset init value
    res = 180;
    break;
  }
}
